from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import random
import logging
import csv

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7907843779:AAHweV-VrnluOt-rK-tDlM2EuFEo5oMyTBQ"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏–≥—Ä—ã –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
game_data = {}
database = []

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_database(file_path="database.csv"):
    global database
    try:
        with open(file_path, mode="r", encoding="utf-8") as file:
            reader = csv.reader(file)
            database = [row for row in reader]
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    except FileNotFoundError:
        logging.error("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        database = []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        database = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    keyboard = (
        [["/startgame", "/menu"], ["/help", "/stopgame", "/check"]]
        if user_id in game_data
        else [["/startgame", "/menu"], ["/help", "/check"]]
    )
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n\n"
        "üîπ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "üîπ /help - –ü–æ–º–æ—â—å (—Ç—ã —Å–µ–π—á–∞—Å —á–∏—Ç–∞–µ—à—å —ç—Ç–æ)\n"
        "üîπ /menu - –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏\n\n"
        "üéÆ –ò–≥—Ä—ã:\n"
        "üîπ /startgame - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ (–Ø –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100)\n"
        "üîπ /stopgame - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É\n\n"
        "üí¨ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è:\n"
        "üîπ /echo [—Ç–µ–∫—Å—Ç] - –ü–æ–≤—Ç–æ—Ä—é —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üîπ /check [–∑–∞–ø—Ä–æ—Å] - –ü—Ä–æ–≤–µ—Ä—é –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
        "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîπ /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "üîπ /reload_database - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n\n"
        "–ï—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ–º–Ω–∏—à—å –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )

    user_id = update.message.from_user.id
    if user_id in game_data:
        help_text += "\n\n‚ùó –¢—ã —É–∂–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–≥–∞–¥—ã–≤–∞—Ç—å."

    await update.message.reply_text(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /menu
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    keyboard = (
        [["–û –±–æ—Ç–µ", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"], ["–ü–æ–º–æ—â—å", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É"]]
        if user_id in game_data
        else [["–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", "–û –±–æ—Ç–µ", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"], ["–ü–æ–º–æ—â—å", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É"]]
    )
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /startgame
async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id in game_data:
        await update.message.reply_text("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ.")
        return

    number = random.randint(1, 100)
    game_data[user_id] = number
    await update.message.reply_text("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å!")

# –ö–æ–º–∞–Ω–¥–∞ /stopgame
async def stop_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id in game_data:
        del game_data[user_id]
        await update.message.reply_text("–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ?")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –∏–≥—Ä—É.")

# –ö–æ–º–∞–Ω–¥–∞ /check
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: /check –∑–∞–ø—Ä–æ—Å")
        return

    matches = [row for row in database if query.lower() in " ".join(row).lower()]
    if matches:
        response = "–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã:\n" + "\n".join([", ".join(row) for row in matches])
    else:
        response = "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    await update.message.reply_text(response)

# –ö–æ–º–∞–Ω–¥–∞ /reload_database
async def reload_database(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    load_database()
    await update.message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
async def guess_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    guess = update.message.text

    if user_id not in game_data:
        await update.message.reply_text("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /startgame.")
        return

    try:
        guess = int(guess)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    number = game_data[user_id]
    if guess < number:
        await update.message.reply_text("–ë–æ–ª—å—à–µ!")
    elif guess > number:
        await update.message.reply_text("–ú–µ–Ω—å—à–µ!")
    else:
        await update.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!")
        del game_data[user_id]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.text.lower() in ["–æ –±–æ—Ç–µ", "–∫–æ–Ω—Ç–∞–∫—Ç—ã"]:
        await update.message.reply_text("–Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.")
    elif update.message.text.lower() == "–ø–æ–º–æ—â—å":
        await help_command(update, context)
    elif update.message.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /check [–∑–∞–ø—Ä–æ—Å] –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await update.message.reply_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {update.message.text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %s", context.error)
    if update:
        await update.message.reply_text("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    load_database()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("startgame", start_game))
    application.add_handler(CommandHandler("stopgame", stop_game))
    application.add_handler(CommandHandler("check", check))
    application.add_handler(CommandHandler("reload_database", reload_database))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, guess_number))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
